// bono-scraper.js - Automatizador de coleta de BONO
const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');
const cheerio = require('cheerio');
const cron = require('node-cron');

class BONOScraper {
  constructor() {
    this.baseUrl = 'https://bono.marinha.mil.br';
    this.dataDir = path.join(__dirname, 'data');
    this.bonoDir = path.join(__dirname, 'public', 'bono-cache');
    this.lastCheck = null;
    this.initDirectories();
  }

  // Criar diret√≥rios necess√°rios
  initDirectories() {
    [this.dataDir, this.bonoDir].forEach(dir => {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
        console.log(`üìÅ Diret√≥rio criado: ${dir}`);
      }
    });
  }

  // Fazer requisi√ß√£o com headers apropriados
  async fetchWithHeaders(url) {
    try {
      console.log(`üåê Buscando: ${url}`);
      
      const response = await fetch(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
          'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
          'Accept-Encoding': 'gzip, deflate, br',
          'Connection': 'keep-alive',
          'Upgrade-Insecure-Requests': '1'
        },
        timeout: 30000
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      return await response.text();
    } catch (error) {
      console.error(`‚ùå Erro ao buscar ${url}:`, error.message);
      throw error;
    }
  }

  // Buscar BONOs mais recentes
  async getLatestBONOs() {
    try {
      const html = await this.fetchWithHeaders(this.baseUrl);
      const $ = cheerio.load(html);
      
      const bonos = [];
      
      // Procurar links de BONO na p√°gina principal
      $('a[href*="/bono/article/view/"]').each((i, element) => {
        const $link = $(element);
        const href = $link.attr('href');
        const text = $link.text().trim();
        
        if (href && (text.includes('BONO') || text.includes('BOLETIM'))) {
          const fullUrl = href.startsWith('http') ? href : `${this.baseUrl}${href}`;
          
          // Extrair n√∫mero do BONO do URL
          const match = href.match(/\/view\/(\d+)/);
          const bonoId = match ? match[1] : null;
          
          bonos.push({
            id: bonoId,
            title: text,
            url: fullUrl,
            found: new Date().toISOString()
          });
        }
      });

      // Remover duplicatas
      const uniqueBonos = bonos.filter((bono, index, self) => 
        index === self.findIndex(b => b.id === bono.id)
      );

      console.log(`üìã Encontrados ${uniqueBonos.length} BONOs`);
      return uniqueBonos;

    } catch (error) {
      console.error('‚ùå Erro ao buscar BONOs:', error);
      return [];
    }
  }

  // Baixar conte√∫do completo de um BONO
  async downloadBONO(bono) {
    try {
      console.log(`üì• Baixando BONO ${bono.id}: ${bono.title}`);
      
      const html = await this.fetchWithHeaders(bono.url);
      const $ = cheerio.load(html);
      
      // Extrair dados principais
      const bonoData = {
        id: bono.id,
        title: bono.title,
        url: bono.url,
        downloadedAt: new Date().toISOString(),
        content: {}
      };

      // Extrair t√≠tulo principal
      const mainTitle = $('h1.h1').first().text().trim();
      if (mainTitle) {
        bonoData.content.title = mainTitle;
        
        // Extrair n√∫mero e data do BONO
        const titleMatch = mainTitle.match(/N¬∫\s*(\d+)\s*DE\s*(\d+)\s*DE\s*(\w+)\s*DE\s*(\d+)/i);
        if (titleMatch) {
          bonoData.number = titleMatch[1];
          bonoData.day = titleMatch[2];
          bonoData.month = titleMatch[3];
          bonoData.year = titleMatch[4];
          bonoData.date = this.parseBonoDate(titleMatch[2], titleMatch[3], titleMatch[4]);
        }
      }

      // Extrair se√ß√µes
      bonoData.content.sections = [];
      
      $('section').each((i, section) => {
        const $section = $(section);
        const sectionTitle = $section.find('h3.h3').first().text().trim();
        
        if (sectionTitle) {
          const sectionData = {
            title: sectionTitle,
            articles: []
          };

          // Extrair artigos da se√ß√£o
          $section.find('.section').each((j, article) => {
            const $article = $(article);
            
            const articleData = {
              content: $article.find('div:not(.bono-container)').text().trim(),
              images: []
            };

            // Extrair imagens
            $article.find('img').each((k, img) => {
              const $img = $(img);
              const src = $img.attr('src');
              if (src) {
                const fullImgUrl = src.startsWith('http') ? src : `${this.baseUrl}${src}`;
                articleData.images.push({
                  src: fullImgUrl,
                  alt: $img.attr('alt') || '',
                  class: $img.attr('class') || ''
                });
              }
            });

            if (articleData.content || articleData.images.length > 0) {
              sectionData.articles.push(articleData);
            }
          });

          if (sectionData.articles.length > 0) {
            bonoData.content.sections.push(sectionData);
          }
        }
      });

      // Extrair BONOs especiais (popups)
      const specialBonos = [];
      $('div.popup').each((i, popup) => {
        const $popup = $(popup);
        const popupId = $popup.attr('id');
        
        if (popupId) {
          specialBonos.push({
            id: popupId,
            title: $popup.find('h3.h3').first().text().trim(),
            content: $popup.find('.section div:not(.bono-container)').text().trim()
          });
        }
      });

      if (specialBonos.length > 0) {
        bonoData.content.specialBonos = specialBonos;
      }

      // Salvar dados
      await this.saveBONOData(bonoData);
      
      // Baixar imagens se necess√°rio
      await this.downloadBonoImages(bonoData);

      console.log(`‚úÖ BONO ${bono.id} baixado com sucesso`);
      return bonoData;

    } catch (error) {
      console.error(`‚ùå Erro ao baixar BONO ${bono.id}:`, error);
      return null;
    }
  }

  // Converter m√™s em portugu√™s para n√∫mero
  parseBonoDate(day, month, year) {
    const meses = {
      'janeiro': '01', 'fevereiro': '02', 'mar√ßo': '03', 'abril': '04',
      'maio': '05', 'junho': '06', 'julho': '07', 'agosto': '08',
      'setembro': '09', 'outubro': '10', 'novembro': '11', 'dezembro': '12'
    };
    
    const monthNum = meses[month.toLowerCase()] || '01';
    return `${year}-${monthNum}-${day.padStart(2, '0')}`;
  }

  // Salvar dados do BONO
  async saveBONOData(bonoData) {
    const filename = `bono-${bonoData.id}-${bonoData.date || 'unknown'}.json`;
    const filepath = path.join(this.bonoDir, filename);
    
    try {
      fs.writeFileSync(filepath, JSON.stringify(bonoData, null, 2), 'utf8');
      console.log(`üíæ BONO salvo: ${filename}`);
      
      // Manter √≠ndice de BONOs
      await this.updateBonoIndex(bonoData);
      
    } catch (error) {
      console.error(`‚ùå Erro ao salvar BONO ${bonoData.id}:`, error);
    }
  }

  // Atualizar √≠ndice de BONOs
  async updateBonoIndex(bonoData) {
    const indexPath = path.join(this.dataDir, 'bono-index.json');
    
    let index = [];
    if (fs.existsSync(indexPath)) {
      try {
        index = JSON.parse(fs.readFileSync(indexPath, 'utf8'));
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao ler √≠ndice, criando novo');
        index = [];
      }
    }

    // Verificar se BONO j√° existe no √≠ndice
    const existingIndex = index.findIndex(item => item.id === bonoData.id);
    
    const indexItem = {
      id: bonoData.id,
      number: bonoData.number,
      date: bonoData.date,
      title: bonoData.content.title,
      url: bonoData.url,
      downloadedAt: bonoData.downloadedAt,
      sectionsCount: bonoData.content.sections?.length || 0,
      specialBonosCount: bonoData.content.specialBonos?.length || 0
    };

    if (existingIndex >= 0) {
      index[existingIndex] = indexItem;
    } else {
      index.push(indexItem);
    }

    // Ordenar por data (mais recente primeiro)
    index.sort((a, b) => new Date(b.date) - new Date(a.date));

    fs.writeFileSync(indexPath, JSON.stringify(index, null, 2), 'utf8');
    console.log(`üìá √çndice atualizado: ${index.length} BONOs`);
  }

  // Baixar imagens do BONO
  async downloadBonoImages(bonoData) {
    const imagesDir = path.join(this.bonoDir, 'images', bonoData.id);
    
    if (!fs.existsSync(imagesDir)) {
      fs.mkdirSync(imagesDir, { recursive: true });
    }

    const imagePromises = [];

    // Coletar todas as imagens
    const allImages = [];
    bonoData.content.sections?.forEach(section => {
      section.articles?.forEach(article => {
        article.images?.forEach(img => {
          allImages.push(img);
        });
      });
    });

    // Baixar imagens
    for (const [index, image] of allImages.entries()) {
      imagePromises.push(this.downloadImage(image.src, imagesDir, `image-${index + 1}`));
    }

    if (imagePromises.length > 0) {
      try {
        await Promise.all(imagePromises);
        console.log(`üñºÔ∏è ${imagePromises.length} imagens baixadas para BONO ${bonoData.id}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Algumas imagens n√£o puderam ser baixadas:`, error.message);
      }
    }
  }

  // Baixar uma imagem espec√≠fica
  async downloadImage(url, dir, filename) {
    try {
      const response = await fetch(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const buffer = await response.buffer();
      const ext = path.extname(url).split('?')[0] || '.jpg';
      const filepath = path.join(dir, `${filename}${ext}`);
      
      fs.writeFileSync(filepath, buffer);
      console.log(`üì∑ Imagem salva: ${filename}${ext}`);

    } catch (error) {
      console.warn(`‚ö†Ô∏è Erro ao baixar imagem ${url}:`, error.message);
    }
  }

  // Verificar se BONO j√° foi baixado
  isBonoDownloaded(bonoId) {
    const files = fs.readdirSync(this.bonoDir);
    return files.some(file => file.startsWith(`bono-${bonoId}-`));
  }

  // Executar verifica√ß√£o
  async runCheck() {
    console.log(`üîç Verificando BONOs √†s ${new Date().toLocaleString('pt-BR')}`);
    
    try {
      const bonos = await this.getLatestBONOs();
      let newDownloads = 0;

      for (const bono of bonos) {
        if (!this.isBonoDownloaded(bono.id)) {
          console.log(`üÜï Novo BONO encontrado: ${bono.id}`);
          await this.downloadBONO(bono);
          newDownloads++;
          
          // Aguardar entre downloads para n√£o sobrecarregar
          await new Promise(resolve => setTimeout(resolve, 2000));
        } else {
          console.log(`‚úÖ BONO ${bono.id} j√° baixado`);
        }
      }

      this.lastCheck = new Date();
      
      if (newDownloads > 0) {
        console.log(`üéâ ${newDownloads} novos BONOs baixados!`);
        
        // Notificar sistema PAPEM sobre novos BONOs
        await this.notifyPapemSystem(newDownloads);
      } else {
        console.log(`üìÑ Nenhum BONO novo encontrado`);
      }

    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o:', error);
    }
  }

  // Notificar sistema PAPEM sobre novos BONOs
  async notifyPapemSystem(count) {
    try {
      // Criar aviso autom√°tico no sistema PAPEM
      const notice = {
        title: `${count} Novo${count > 1 ? 's' : ''} BONO${count > 1 ? 'S' : ''} Dispon√≠vel${count > 1 ? 'eis' : ''}`,
        content: `Foi${count > 1 ? 'ram' : ''} detectado${count > 1 ? 's' : ''} automaticamente ${count} novo${count > 1 ? 's' : ''} Boletim${count > 1 ? 's' : ''} de Ordens e Not√≠cias. Acesse o painel administrativo para fazer upload.`,
        priority: 'medium',
        startDate: new Date().toISOString(),
        endDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24h
        active: true
      };

      const response = await fetch('http://localhost:3001/api/notices', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(notice)
      });

      if (response.ok) {
        console.log(`üì¢ Aviso criado no sistema PAPEM`);
      }

    } catch (error) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel notificar o sistema PAPEM:', error.message);
    }
  }

  // Obter estat√≠sticas
  getStats() {
    const indexPath = path.join(this.dataDir, 'bono-index.json');
    
    if (!fs.existsSync(indexPath)) {
      return { total: 0, thisWeek: 0, thisMonth: 0 };
    }

    const index = JSON.parse(fs.readFileSync(indexPath, 'utf8'));
    const now = new Date();
    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

    return {
      total: index.length,
      thisWeek: index.filter(item => new Date(item.date) >= weekAgo).length,
      thisMonth: index.filter(item => new Date(item.date) >= monthAgo).length,
      lastCheck: this.lastCheck
    };
  }

  // Iniciar monitoramento autom√°tico
  startAutoCheck() {
    console.log('ü§ñ Iniciando monitoramento autom√°tico de BONOs...');
    
    // Verificar a cada 2 horas em dias √∫teis (segunda a sexta), das 7h √†s 18h
    cron.schedule('0 7-18/2 * * 1-5', () => {
      this.runCheck();
    });

    // Verifica√ß√£o especial √†s 8h, 12h e 16h (hor√°rios prov√°veis de publica√ß√£o)
    cron.schedule('0 8,12,16 * * 1-5', () => {
      console.log('‚è∞ Verifica√ß√£o priorit√°ria de BONO');
      this.runCheck();
    });

    console.log('‚úÖ Monitoramento autom√°tico configurado');
    console.log('   - Verifica√ß√µes a cada 2h (7h-18h, seg-sex)');
    console.log('   - Verifica√ß√µes priorit√°rias: 8h, 12h, 16h');
  }
}

module.exports = BONOScraper;
